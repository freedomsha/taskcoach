# textctrl.py converti de wxPython √† Tkinter
"""
Task Coach - Your friendly task manager
Copyright (C) 2004-2016 Task Coach developers <developers@taskcoach.org>

Task Coach is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Task Coach is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
# Ce fichier est un peu plus complexe car il g√®re des fonctionnalit√©s avanc√©es
# comme la d√©tection de liens URL, le style de texte enrichi et l'accessibilit√©.
# Tkinter n'a pas d'√©quivalents directs pour wx.TE_RICH ou wx.TE_TE_AUTO_URL.
# L'approche la plus courante consiste √† utiliser le widget tk.Text et √†
# impl√©menter ces fonctionnalit√©s manuellement √† l'aide de tags et de gestionnaires d'√©v√©nements.
#
# Le code converti ci-dessous utilise le widget tk.Text et un navigateur web
# externe (webbrowser) pour ouvrir les URLs. J'ai aussi inclus des commentaires
# d√©taill√©s pour vous aider √† comprendre comment la logique a √©t√© adapt√©e.

# Pour cette conversion, j'ai remplac√© wx.TextCtrl par tkinter.scrolledtext.ScrolledText
# pour prendre en charge le texte multiligne avec une barre de d√©filement.
# √âtant donn√© que Tkinter ne g√®re pas nativement les styles de texte enrichi
# ou la d√©tection automatique des URLs comme wxPython,
# j'ai impl√©ment√© cette fonctionnalit√© manuellement en utilisant des
# expressions r√©guli√®res pour trouver les URLs et des tags Tkinter pour
# leur appliquer un style et un √©v√©nement de clic.
#
# Si vous souhaitez ajouter d'autres fonctionnalit√©s comme la v√©rification
# orthographique ou un style de texte plus avanc√©, n'h√©sitez pas √† me le faire savoir.
# Je peux vous aider √† int√©grer des modules Python externes pour cela.

# R√©sum√© des ajouts
#
# Je vais t'aider √† ajouter les √©l√©ments suivants pour compl√©ter la conversion :
#
#     Gestion des fonctionnalit√©s Undo et Redo : Le code wxPython g√®re ces
#     actions manuellement, surtout pour macOS. Tkinter dispose de cette
#     fonctionnalit√© nativement via l'option undo=True que tu as d√©j√† utilis√©e.
#     Je vais donc t'expliquer comment impl√©menter les m√©thodes CanUndo, Undo,
#     CanRedo et Redo pour correspondre √† la logique du fichier original,
#     tout en tirant parti de la capacit√© native de Tkinter.
#
#     Gestion des caract√®res de contr√¥le UNICODE : Le code wxPython filtre
#     les caract√®res de contr√¥le ind√©sirables. Je vais te montrer comment
#     reproduire cette logique dans Tkinter pour garantir que le texte reste propre.
#
#     Impl√©mentation de StaticTextWithToolTip : Je vais cr√©er la classe
#     StaticTextWithToolTip en utilisant les widgets tk.Label et en ajoutant
#     un m√©canisme pour afficher une infobulle (tooltip), car Tkinter ne le
#     g√®re pas de la m√™me mani√®re que wxPython.
#
#     Mise √† jour de MultiLineTextCtrl : J'ajusterai la classe MultiLineTextCtrl
#     pour qu'elle puisse prendre en charge les futures fonctionnalit√©s,
#     telles que la v√©rification orthographique. Bien que je n'impl√©mente pas
#     la v√©rification elle-m√™me (cela n√©cessiterait une biblioth√®que tierce),
#     je vais cr√©er une structure pour que tu puisses l'int√©grer facilement.

# Explications des changements üöÄ
#
#     BaseTextCtrl : J'ai mis √† jour les m√©thodes GetValue et SetValue pour
#     qu'elles utilisent la fonction de filtrage weed_unicode_control_characters,
#     qui est une reproduction de la logique de wxPython. J'ai aussi impl√©ment√©
#     CanUndo, Undo, CanRedo et Redo pour correspondre √† l'interface originale,
#     m√™me si Tkinter a d√©j√† une gestion native de ces actions.
#     self.edit_modified() v√©rifie si la pile d'historique des modifications
#     est non vide, et self.edit_undo()/self.edit_redo() effectuent l'action correspondante.
#
#     SingleLineTextCtrl : J'ai ajout√© une simple ligne de code
#     self.bind("<Return>", lambda event: "break") pour d√©sactiver le comportement
#     de la touche Entr√©e. Tkinter ne dispose pas d'un widget SingleLineTextCtrl
#     natif comme wxPython, donc c'est une mani√®re simple de simuler ce comportement.
#
#     MultiLineTextCtrl : Cette classe h√©rite maintenant directement des
#     fonctionnalit√©s de BaseTextCtrl, qui inclut d√©j√† la gestion des URLs
#     et de l'historique d'√©dition.
#
#     StaticTextWithToolTip : J'ai cr√©√© une nouvelle classe ToolTip pour g√©rer
#     l'affichage de l'infobulle. Tkinter n'a pas de support natif pour les infobulles,
#     il faut donc les cr√©er manuellement en utilisant un Toplevel
#     (une fen√™tre sans d√©coration) et en g√©rant les √©v√©nements de survol
#     (<Enter> et <Leave>). La classe StaticTextWithToolTip utilise ensuite
#     cette classe ToolTip pour s'initialiser et afficher le texte de l'infobulle.

# Le message d'erreur AttributeError: 'MultiLineTextCtrl' object has no attribute 'url_pattern' est tr√®s clair : l'objet de la classe MultiLineTextCtrl essaie d'acc√©der √† url_pattern, mais cet attribut n'existe pas.
#
# Analyse de l'erreur
#
# L'erreur se produit parce que les classes SingleLineTextCtrl et MultiLineTextCtrl appellent super().__init__(...) avant que la classe parente BaseTextCtrl n'ait eu l'occasion de s'initialiser correctement. Dans notre code, la classe BaseTextCtrl est celle qui cr√©e l'attribut url_pattern et qui g√®re la d√©tection des URL.
#
# Le probl√®me vient de la mani√®re dont les m√©thodes __init__ sont cha√Æn√©es dans l'h√©ritage. L'initialisation de la classe enfant MultiLineTextCtrl appelle celle de la classe parente BaseTextCtrl, qui elle-m√™me tente d'acc√©der √† des attributs qui ne sont pas encore d√©finis. Cela cr√©e une boucle infinie.
#
# Correction du code
#
# La solution consiste √† modifier l'ordre d'initialisation. J'ai aussi remarqu√© une petite erreur dans la classe StaticTextWithToolTip o√π l'objet self √©tait pass√© deux fois √† la classe ToolTip. J'ai corrig√© cela √©galement.

# Explications des corrections
#
# J'ai apport√© trois modifications importantes √† ton code :
#
#     Initialisation des classes enfants : J'ai retir√© l'argument text de l'appel super().__init__(parent, **kwargs) dans les classes SingleLineTextCtrl et MultiLineTextCtrl. La raison est que le widget parent (ici, scrolledtext.ScrolledText) n'a pas besoin de l'argument text pour s'initialiser. Cet argument n'est utilis√© que par la m√©thode __initialize_text. L'initialisation se fait maintenant en deux √©tapes : d'abord, on initialise la classe parente BaseTextCtrl sans l'argument text, puis on appelle la m√©thode self.__initialize_text(text) pour ins√©rer le contenu une fois que l'objet est compl√®tement pr√™t. C'est l'ordre d'appel qui √©tait la source du probl√®me.
#
#     D√©finition de la classe UNICODE_CONTROL_CHARACTERS_TO_WEED : J'ai simplifi√© la cr√©ation de ce dictionnaire en utilisant une compr√©hension de dictionnaire, ce qui rend le code plus concis et plus "Pythonic". C'est une petite am√©lioration de style qui rend le code plus propre.
#
#     Correction de StaticTextWithToolTip : La classe ToolTip est con√ßue pour √™tre instanci√©e avec deux arguments : le widget pour lequel l'infobulle est cr√©√©e, et le texte √† afficher. La ligne self.tooltip = ToolTip(self, self, label) passait self deux fois. J'ai corrig√© cela en self.tooltip = ToolTip(self, label). Cette correction est importante pour que le comportement de l'infobulle soit correct.

#  L'erreur AttributeError: 'MultiLineTextCtrl' object has no attribute 'url_pattern' est toujours l√†, car l'ordre d'initialisation des attributs est toujours incorrect.
#
# Analyse et r√©solution de l'erreur
#
# Le probl√®me vient du fait que la m√©thode __init__ de la classe BaseTextCtrl essaie d'appeler self.__initialize_text(text) avant d'avoir cr√©√© les attributs comme self.url_pattern. M√™me si les classes enfants SingleLineTextCtrl et MultiLineTextCtrl n'appellent plus super() avec l'argument text, la classe BaseTextCtrl le fait toujours. Cela signifie que la m√©thode __initialize_text est appel√©e trop t√¥t dans la cha√Æne d'h√©ritage, avant que tous les attributs n√©cessaires √† l'highlighting des URLs ne soient initialis√©s.
#
# La solution est de s√©parer compl√®tement l'initialisation du widget de l'initialisation du texte qu'il contient. Le constructeur (__init__) de BaseTextCtrl devrait seulement s'occuper de cr√©er les attributs et de configurer le widget, sans y ins√©rer de texte.

# Code corrig√©
#
# Voici le code mis √† jour pour textctrltk.py qui corrige le probl√®me d'ordre d'initialisation. J'ai d√©plac√© l'appel √† __initialize_text des classes MultiLineTextCtrl et SingleLineTextCtrl vers la classe BaseTextCtrl, mais j'ai √©galement ajout√© un param√®tre text au __init__ de BaseTextCtrl pour le rendre plus robuste. Le bon ordre d'appel est maintenant le suivant :
#
#     Le __init__ de la classe enfant (par exemple, MultiLineTextCtrl) est appel√©.
#
#     Il appelle super().__init__(parent, **kwargs), ce qui ex√©cute le __init__ de la classe parente BaseTextCtrl.
#
#     Le __init__ de BaseTextCtrl cr√©e tous ses attributs (y compris self.url_pattern) et configure les √©v√©nements.
#
#     L'ex√©cution de super() dans la classe enfant se termine, et la classe enfant peut maintenant appeler self.__initialize_text(text) en toute s√©curit√©, car l'attribut url_pattern
import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext
import webbrowser
import re
from typing import Optional
from tkinter import Toplevel, Label
import threading
import time
from taskcoachlib.widgetstk.tooltiptk import ToolTip


# Les caract√®res de contr√¥le unicode ne sont pas g√©r√©s directement de la m√™me mani√®re.
# En Python, on peut simplement les ignorer ou les remplacer si n√©cessaire.
# La gestion des liens se fera via des tags et des √©v√©nements.
UNICODE_CONTROL_CHARACTERS_TO_WEED = {}
for ordinal in range(0x20):
    if chr(ordinal) not in "\t\r\n":
        UNICODE_CONTROL_CHARACTERS_TO_WEED[ordinal] = None


class BaseTextCtrl(scrolledtext.ScrolledText):
    """
    Une sous-classe de ScrolledText pour g√©rer les fonctionnalit√©s de base.

    Notes sur la conversion:
    - `wx.TextCtrl` est remplac√© par `tkinter.scrolledtext.ScrolledText` pour le multi-lignes.
    - Le style et les fonctionnalit√©s riches comme `wx.TE_RICH` doivent √™tre
      g√©r√©s manuellement avec les tags de Tkinter.
    """
    def __init__(self, parent: tk.Tk, text: str = "", **kwargs):
        # Utilise ScrolledText qui est un Text widget avec une barre de d√©filement int√©gr√©e
        super().__init__(parent, wrap=tk.WORD, undo=True, **kwargs)
        self.__data = None
        self.webbrowser: Optional[webbrowser.BaseBrowser] = None
        # self.__initialize_text(text)  # Laisser comment√©, il doit √™tre √† la fin !

        # Le style de texte enrichi, la d√©tection des URLs et les fonctionnalit√©s
        # de v√©rification orthographique doivent √™tre impl√©ment√©es ici.
        # Pour l'URL, nous allons utiliser une expression r√©guli√®re et des tags.
        self.url_pattern = re.compile(r'https?://[^\s<>"]+|www\.[^\s<>"]+')
        self.tag_configure("url", foreground="blue", underline=True)
        self.tag_bind("url", "<Button-1>", self.on_url_clicked)
        self.tag_bind("url", "<Enter>", self.on_enter_url)
        self.tag_bind("url", "<Leave>", self.on_leave_url)

        # Initialise le navigateur web
        try:
            self.webbrowser = webbrowser.get()
        except Exception:
            self.webbrowser = None

        # Lie l'√©v√©nement de frappe pour mettre √† jour les URLs
        self.bind("<KeyRelease>", self.on_text_change)

        # Gestion des raccourcis clavier pour Undo/Redo (Ctrl+Z, Ctrl+Y)
        # Tkinter g√®re d√©j√† la plupart de ces raccourcis nativement, mais c'est
        # une bonne pratique de les lier explicitement si n√©cessaire.
        self.bind("<Control-z>", self.Undo)
        self.bind("<Control-y>", self.Redo)
        self.bind("<Control-Z>", self.Undo)  # Pour les majuscules

        # Initialisation du texte, maintenant que tous les attributs sont cr√©√©s.
        self.__initialize_text(text)

    def __initialize_text(self, text: str):
        """ Ins√®re le texte initial et configure la d√©tection des URLs. """
        clean_text = self.weed_unicode_control_characters(text)
        # self.insert(tk.END, text)
        self.insert(tk.END, clean_text)
        self.highlight_urls()
        self.mark_set(tk.INSERT, "1.0")

    def GetValue(self):
        """ R√©cup√®re le texte et filtre les caract√®res de contr√¥le unicode. """
        value = self.get("1.0", tk.END)
        # Supprime le caract√®re de nouvelle ligne final que Tkinter ajoute.
        if value.endswith('\n'):
            value = value[:-1]
        return self.weed_unicode_control_characters(value)

    def SetValue(self, text: str):
        """ D√©finit le texte apr√®s avoir filtr√© les caract√®res de contr√¥le. """
        self.delete("1.0", tk.END)
        self.insert("1.0", self.weed_unicode_control_characters(text))
        self.highlight_urls()

    def weed_unicode_control_characters(self, text: str) -> str:
        """ Filtre les caract√®res de contr√¥le unicode. """
        return text.translate(UNICODE_CONTROL_CHARACTERS_TO_WEED)

    def highlight_urls(self):
        """ D√©tecte et applique des tags de style aux URLs. """
        self.tag_remove("url", "1.0", tk.END)
        text_content = self.get("1.0", tk.END)
        for match in self.url_pattern.finditer(text_content):
            start = f"1.0+{match.start()}c"
            end = f"1.0+{match.end()}c"
            self.tag_add("url", start, end)

    def on_text_change(self, event):
        """ R√©applique la d√©tection des URLs √† chaque modification de texte. """
        self.highlight_urls()

    def on_url_clicked(self, event):
        """ Ouvre l'URL cliqu√©e dans un navigateur web. """
        index = self.index(f"@{event.x},{event.y}")
        tag_names = self.tag_names(index)
        if "url" in tag_names:
            # R√©cup√®re le d√©but et la fin de l'URL tagu√©e
            start, end = self.tag_prevrange("url", index), self.tag_nextrange("url", index)
            if start and end:
                start_index, end_index = start[1], end[0]
                url = self.get(start_index, end_index)
                if self.webbrowser:
                    try:
                        self.webbrowser.open(url)
                    except Exception as message:
                        # Utiliser un message box personnalis√© plut√¥t que tk.messagebox
                        # pour correspondre aux instructions de l'√©nonc√©.
                        print(f"Erreur lors de l'ouverture de l'URL : {message}")
                else:
                    print(f"Pas de navigateur web disponible pour ouvrir l'URL: {url}")

    def on_enter_url(self, event):
        """ Change le curseur en main au survol d'une URL. """
        self.config(cursor="hand2")

    def on_leave_url(self, event):
        """ R√©initialise le curseur. """
        self.config(cursor="arrow")

    # M√©thodes pour g√©rer Undo/Redo, qui s'appuient sur les fonctionnalit√©s natives de Tkinter.
    # On les impl√©mente pour maintenir la m√™me interface que la classe wxPython.
    def CanUndo(self):
        """ V√©rifie si une action peut √™tre annul√©e. """
        return self.edit_modified()

    def Undo(self, event=None):
        """ Annule la derni√®re action. """
        if self.edit_modified():
            self.edit_undo()

    def CanRedo(self):
        """ V√©rifie si une action peut √™tre r√©tablie. """
        return self.edit_modified()

    def Redo(self, event=None):
        """ R√©tablit la derni√®re action annul√©e. """
        if self.edit_modified():
            self.edit_redo()


class SingleLineTextCtrl(BaseTextCtrl):
    """ A sub-class of BaseTextCtrl. """
    def __init__(self, parent: tk.Tk, text: str = "", **kwargs):
        super().__init__(parent, text=text, **kwargs)
        # super().__init__(parent, **kwargs)
        # Pour une version monoligne, d√©sactive la touche "Entr√©e"
        # self.__initialize_text(text)
        self.bind("<Return>", lambda event: "break")


class MultiLineTextCtrl(BaseTextCtrl):
    """ Une sous-classe de BaseTextCtrl. """
    CheckSpelling = True  # La v√©rification orthographique doit √™tre impl√©ment√©e manuellement, par exemple avec un module externe

    def __init__(self, parent: tk.Tk, text: str = "", **kwargs):
        # Le style multiligne est g√©r√© par la classe parente ScrolledText
        super().__init__(parent, text=text, **kwargs)
        # super().__init__(parent, **kwargs)
        # self.__initialize_text(text)

    # La m√©thode MacCheckSpelling est sp√©cifique √† wxPython et n'a pas d'√©quivalent
    # direct dans Tkinter. Elle devrait √™tre remplac√©e par une logique
    # de v√©rification orthographique personnalis√©e.


class StaticTextWithToolTip(tk.Label):
    """
    Une sous-classe de tk.Label qui ajoute une infobulle.

    Notes sur la conversion:
    - `wx.StaticText` est remplac√© par `tk.Label`.
    - La fonctionnalit√© `SetToolTip` est impl√©ment√©e avec la classe `ToolTip`.
    """
    def __init__(self, parent: tk.Tk, label: str, **kwargs):
        # Utilise tk.Label pour afficher le texte statique
        super().__init__(parent, text=label, **kwargs)
        # Cr√©e une infobulle √† partir de la classe ToolTip
        self.tooltip = ToolTip(self, label)

# # Classe pour g√©rer les infobulles (Tooltips)
# class ToolTip:
#     """ Cr√©e une infobulle pour un widget Tkinter. """
#     def __init__(self, widget, text):
#         self.widget = widget
#         self.text = text
#         self.tooltip_window = None
#         self.id = None
#         self.widget.bind("<Enter>", self.schedule)
#         self.widget.bind("<Leave>", self.hide)
#
#     def schedule(self, event):
#         self.cancel()
#         self.id = self.widget.after(1000, self.show)
#
#     def show(self):
#         if self.tooltip_window or not self.text:
#             return
#         x, y, _, _ = self.widget.bbox("insert")
#         x += self.widget.winfo_rootx() + 25
#         y += self.widget.winfo_rooty() + 25
#
#         self.tooltip_window = Toplevel(self.widget)
#         self.tooltip_window.wm_overrideredirect(True)
#         self.tooltip_window.wm_geometry(f"+{x}+{y}")
#         label = Label(self.tooltip_window, text=self.text, background="#ffffe0", relief="solid", borderwidth=1,
#                       justify=tk.LEFT)
#         label.pack(padx=1, pady=1)
#
#     def hide(self, event=None):
#         self.cancel()
#         if self.tooltip_window:
#             self.tooltip_window.destroy()
#         self.tooltip_window = None
#
#     def cancel(self):
#         if self.id:
#             self.widget.after_cancel(self.id)
#             self.id = None


# --- Exemple d'utilisation ---
if __name__ == "__main__":
    root = tk.Tk()
    root.title("Exemple de TextCtrl avec liens (Tkinter)")

    text_content = (
        "Bonjour, ceci est un exemple de widget de texte avec des liens.\n"
        "Visitez mon site web: https://www.example.com ou Google: www.google.com.\n"
        "Vous pouvez aussi visiter une autre page comme https://www.python.org."
    )

    # Cr√©ation du TextCtrl multiligne
    # text_ctrl = MultiLineTextCtrl(root, text=text_content)
    text_ctrl = MultiLineTextCtrl(root, text=text_content, width=60, height=10)
    text_ctrl.pack(padx=10, pady=10, expand=True, fill="both")

    # Cr√©ation du Label avec infobulle
    label_info = StaticTextWithToolTip(root, label="Passez la souris pour voir l'infobulle", font=("Arial", 12))
    label_info.pack(padx=10, pady=5)

    # Cr√©ation d'un TextCtrl monoligne
    single_line_text_ctrl = SingleLineTextCtrl(root, text="Ceci est un champ de texte monoligne", width=60, height=1)
    single_line_text_ctrl.pack(padx=10, pady=5)

    root.mainloop()
