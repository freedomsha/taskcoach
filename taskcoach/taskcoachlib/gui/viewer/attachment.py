# -*- coding: utf-8 -*-

"""
Task Coach - Your friendly task manager
Copyright (C) 2004-2016 Task Coach developers <developers@taskcoach.org>
Copyright (C) 2008 Rob McMullen <rob.mcmullen@gmail.com>
Copyright (C) 2008 Thomas Sonne Olesen <tpo@sonnet.dk>

Task Coach is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Task Coach is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Ce fichier d√©finit la vue des pi√®ces jointes (AttachmentViewer).
"""

import os
import wx

from taskcoachlib import command, widgets  # besoin de Column, VirtualListCtrl, AssignImageList, SetColumnWidth
from taskcoachlib.domain import attachment
# from taskcoachlib.domain.attachment import attachment, sorter
# from taskcoachlib.domain.attachment import *
from taskcoachlib.i18n import _
from taskcoachlib.gui import dialog, uicommand
import taskcoachlib.gui.menu
# from taskcoachlib.gui.menu import *
from taskcoachlib.gui.viewer import base, mixin


class AttachmentViewer(mixin.AttachmentDropTargetMixin,  # pylint: disable=W0223
                       base.SortableViewerWithColumns,
                       mixin.SortableViewerForAttachmentsMixin,
                       mixin.SearchableViewerMixin, mixin.NoteColumnMixin,
                       base.ListViewer):
    """
    Vue des pi√®ces jointes dans Task Coach.

    Cette classe g√®re l'affichage, le tri, la recherche, et l'interaction avec les pi√®ces jointes
    associ√©es aux t√¢ches. Elle permet √©galement la gestion des colonnes et des menus contextuels
    pour les pi√®ces jointes.
    """

    # Classe de tri pour les pi√®ces jointes
    # SorterClass = sorter.AttachmentSorter  # don't exist; Ne semble pas exister dans le code actuel noqa: F405
    # SorterClass = taskcoachlib.domain.attachment.AttachmentSorter
    SorterClass = attachment.AttachmentSorter
    viewerImages = base.ListViewer.viewerImages + ["fileopen", "fileopen_red"]

    def __init__(self, *args, **kwargs):
        """
        Initialise la vue des pi√®ces jointes.

        Args :
            *args : Arguments positionnels.
            **kwargs : Arguments nomm√©s et sp√©cifiques, comme les pi√®ces jointes √† afficher.
        """
        self.attachments = kwargs.pop("attachmentsToShow")
        kwargs.setdefault("settingssection", "attachmentviewer")
        super().__init__(*args, **kwargs)

    def _addAttachments(self, attachments, item, **itemDialogKwargs):
        """
        Ajoute des pi√®ces jointes. Ne pas ajouter de pi√®ces jointes √† d'autres pi√®ces jointes.

        Args :
            attachments (list) : Liste des pi√®ces jointes √† ajouter.
            item : √âl√©ment auquel ajouter les pi√®ces jointes.
            **itemDialogKwargs : Arguments suppl√©mentaires pour la bo√Æte de dialogue d'ajout.
        """
        # Don't try to add attachments to attachments.
        print(f"viewer.attachment.AttachmentViewer._addAttachments : üìå [DEBUG] Ajout des attachements : {attachments} dans self={self}")
        super()._addAttachments(attachments, None, **itemDialogKwargs)

    def domainObjectsToView(self):
        """
        Retourne les objets de domaine √† afficher dans cette vue.

        Returns :
            (list) : Liste des pi√®ces jointes √† afficher.
        """
        return self.attachments

    def isShowingAttachments(self):
        """
        V√©rifie si la vue affiche des pi√®ces jointes.

        Returns :
            (bool) : True si des pi√®ces jointes sont affich√©es, sinon False.
        """
        return True

    def curselectionIsInstanceOf(self, class_):
        """
        V√©rifie si la s√©lection courante est une instance de la classe sp√©cifi√©e.

        Args :
            class_ (type) : Classe √† v√©rifier.

        Returns :
            (bool) : True si la s√©lection est une instance de la classe sp√©cifi√©e.
                """
        return class_ == attachment.Attachment
        # return isinstance(class_, attachment.Attachment)

    def createWidget(self):
        """
        Cr√©e et retourne le widget utilis√© pour afficher les pi√®ces jointes.

        Returns :
            wx.VirtualListCtrl : Le widget utilis√© pour afficher les pi√®ces jointes.
        """
        imageList = self.createImageList()
        itemPopupMenu = taskcoachlib.gui.menu.AttachmentPopupMenu(
            self.parent, self.settings, self.presentation(), self
        )
        columnPopupMenu = taskcoachlib.gui.menu.ColumnPopupMenu(self)
        self._popupMenus.extend([itemPopupMenu, columnPopupMenu])
        self._columns = self._createColumns()

        # Cr√©ation du Treeview
        widget = widgets.VirtualListCtrl(self, self.columns(), self.onSelect,
                                         uicommand.Edit(viewer=self),
                                         itemPopupMenu, columnPopupMenu,
                                         resizeableColumn=1, **self.widgetCreationKeywordArguments())
        widget.SetColumnWidth(0, 150)
        widget.AssignImageList(imageList, wx.IMAGE_LIST_SMALL)
        return widget

    def _createColumns(self):
        """
        Cr√©e et retourne les colonnes utilis√©es pour afficher les informations des pi√®ces jointes.

        Returns :
            (list) : Liste des colonnes.
        """
        # Unresolved attribute reference 'notesChangedEventType' for class '*Attachment'
        return [
            widgets.Column(
                "type",
                _("Type"),
                "",
                width=self.getColumnWidth("type"),
                imageIndicesCallback=self.typeImageIndices,
                renderCallback=lambda item: "",
                resizeCallback=self.onResizeColumn,
            ),
            widgets.Column(
                "subject",
                _("Subject"),
                attachment.FileAttachment.subjectChangedEventType(),
                attachment.URIAttachment.subjectChangedEventType(),
                attachment.MailAttachment.subjectChangedEventType(),
                sortCallback=uicommand.ViewerSortByCommand(
                    viewer=self,
                    value="subject",
                    menuText=_("Sub&ject"),
                    helpText=_("Sort by subject"),
                ),
                width=self.getColumnWidth("subject"),
                renderCallback=lambda item: item.subject(),
                resizeCallback=self.onResizeColumn,
            ),
            widgets.Column(
                "description",
                _("Description"),
                attachment.FileAttachment.descriptionChangedEventType(),
                attachment.URIAttachment.descriptionChangedEventType(),
                attachment.MailAttachment.descriptionChangedEventType(),
                sortCallback=uicommand.ViewerSortByCommand(
                    viewer=self,
                    value="description",
                    menuText=_("&Description"),
                    helpText=_("Sort by description"),
                ),
                width=self.getColumnWidth("description"),
                renderCallback=lambda item: item.description(),
                resizeCallback=self.onResizeColumn,
            ),
            widgets.Column(
                "notes",
                "",
                attachment.FileAttachment.notesChangedEventType(),  # pylint: disable=E1101
                attachment.URIAttachment.notesChangedEventType(),  # pylint: disable=E1101
                attachment.MailAttachment.notesChangedEventType(),  # pylint: disable=E1101
                width=self.getColumnWidth("notes"),
                alignment=wx.LIST_FORMAT_LEFT,
                imageIndicesCallback=self.noteImageIndices,  # pylint: disable=E1101
                headerImageIndex=self.imageIndex["note_icon"],
                renderCallback=lambda item: "",
                resizeCallback=self.onResizeColumn,
            ),
            widgets.Column(
                "creationDateTime",
                _("Creation date"),
                width=self.getColumnWidth("creationDateTime"),
                renderCallback=self.renderCreationDateTime,
                sortCallback=uicommand.ViewerSortByCommand(
                    viewer=self,
                    value="creationDateTime",
                    menuText=_("&Creation date"),
                    helpText=_("Sort by creation date"),
                ),
                resizeCallback=self.onResizeColumn,
            ),
            widgets.Column(
                "modificationDateTime",
                _("Modification date"),
                width=self.getColumnWidth("modificationDateTime"),
                renderCallback=self.renderModificationDateTime,
                sortCallback=uicommand.ViewerSortByCommand(
                    viewer=self,
                    value="modificationDateTime",
                    menuText=_("&Modification date"),
                    helpText=_("Sort by last modification date"),
                ),
                resizeCallback=self.onResizeColumn,
                *attachment.Attachment.modificationEventTypes()
            ),
        ]

    def createColumnUICommands(self):
        """
        Cr√©e et retourne les commandes de l'interface utilisateur pour g√©rer les colonnes.

        Returns :
            (list) : Liste des commandes pour les colonnes.
        """
        return [
            uicommand.ToggleAutoColumnResizing(viewer=self,
                                               settings=self.settings),
            None,
            uicommand.ViewColumn(
                menuText=_("&Description"),
                helpText=_("Show/hide description column"),
                setting="description",
                viewer=self
            ),
            uicommand.ViewColumn(
                menuText=_("&Notes"),
                helpText=_("Show/hide notes column"),
                setting="notes",
                viewer=self
            ),
            uicommand.ViewColumn(
                menuText=_("&Creation date"),
                helpText=_("Show/hide creation date column"),
                setting="creationDateTime",
                viewer=self
            ),
            uicommand.ViewColumn(
                menuText=_("&Modification date"),
                helpText=_("Show/hide last modification date column"),
                setting="modificationDateTime",
                viewer=self
            )
        ]

    def createCreationToolBarUICommands(self):
        """
        Cr√©e et retourne les commandes de la barre d'outils pour la cr√©ation de pi√®ces jointes.

        Returns :
            (tuple) : Les commandes de cr√©ation.
        """
        return (uicommand.AttachmentNew(attachments=self.presentation(),
                                        settings=self.settings,
                                        viewer=self),) + \
            super().createCreationToolBarUICommands()

    def createActionToolBarUICommands(self):
        """
        Cr√©e et retourne les commandes de la barre d'outils pour les actions sur les pi√®ces jointes.

        Returns :
            (tuple) : Les commandes d'action.
        """
        return (uicommand.AttachmentOpen(attachments=attachment.AttachmentList(),
                                         viewer=self, settings=self.settings),) + \
            super().createActionToolBarUICommands()

    def typeImageIndices(self, anAttachment, exists=os.path.exists):  # pylint: disable=W0613
        """
        Retourne les indices des images associ√©es √† un type de pi√®ce jointe.

        Args :
            anAttachment (attachment.Attachment) : La pi√®ce jointe.
            exists (callable) : Fonction pour v√©rifier l'existence du fichier.

        Returns :
            (dict) : Dictionnaire des indices d'images en fonction de l'ic√¥ne standard de wx.
        """
        if anAttachment.type_ == "file":
            attachmentBase = self.settings.get("file", "attachmentbase")
            if exists(anAttachment.normalizedLocation(attachmentBase)):
                index = self.imageIndex["fileopen"]
            else:
                index = self.imageIndex["fileopen_red"]
        else:
            try:
                index = self.imageIndex[
                    {"uri": "earth_blue_icon", "mail": "envelope_icon"}[
                        anAttachment.type_
                    ]
                ]
            except KeyError:
                index = -1
        return {wx.TreeItemIcon_Normal: index}

    def itemEditorClass(self):
        """
        Retourne la classe de l'√©diteur d'√©l√©ments.

        Returns :
            (type) : Classe de l'√©diteur d'√©l√©ments.
        """
        return dialog.editor.AttachmentEditor

    def newItemCommandClass(self):
        """
        Classe de commande pour cr√©er un nouvel √©l√©ment. Non impl√©ment√© ici.

        Raises :
            NotImplementedError : Non impl√©ment√©.
        """
        raise NotImplementedError  # pragma: no cover

    def newSubItemCommandClass(self):
        """
        Classe de commande pour cr√©er un sous-√©l√©ment. Non applicable ici.

        Returns :
            None : Cette vue ne supporte pas la cr√©ation de sous-√©l√©ments.
        """
        return None

    def deleteItemCommandClass(self):
        """
        Classe de commande pour supprimer un √©l√©ment. Non impl√©ment√© ici.

        Raises :
            NotImplementedError : Non impl√©ment√©.
        """
        raise NotImplementedError  # pragma: no cover

    def cutItemCommandClass(self):
        """
        Classe de commande pour couper un √©l√©ment. Non impl√©ment√© ici.

        Raises :
            NotImplementedError : Non impl√©ment√©.
        """
        raise NotImplementedError  # pragma: no cover
